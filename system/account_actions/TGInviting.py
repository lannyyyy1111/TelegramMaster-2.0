# -*- coding: utf-8 -*-
import asyncio
import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from telethon.errors import (AuthKeyDuplicatedError, PeerFloodError, FloodWaitError, UserPrivacyRestrictedError,
                             UserChannelsTooMuchError, BotGroupsBlockedError, ChatWriteForbiddenError,
                             UserBannedInChannelError, UserNotMutualContactError, ChatAdminRequiredError,
                             UserKickedError, ChannelPrivateError, UserIdInvalidError, UsernameNotOccupiedError,
                             UsernameInvalidError, InviteRequestSentError, TypeNotFoundError)
from telethon.tl.functions.channels import InviteToChannelRequest
import datetime
from system.account_actions.TGConnect import TGConnect
from system.account_actions.TGLimits import SettingLimits
from system.account_actions.TGSubUnsub import SubscribeUnsubscribeTelegram
from system.auxiliary_functions.auxiliary_functions import record_and_interrupt, record_inviting_results, find_filess
from system.auxiliary_functions.config import ConfigReader, path_inviting_folder, line_width_button, height_button
from system.localization.localization import back_button, start_inviting_button
from system.sqlite_working_tools.sqlite_working_tools import DatabaseHandler


class InvitingToAGroup:

    def __init__(self):
        self.db_handler = DatabaseHandler()
        self.sub_unsub_tg = SubscribeUnsubscribeTelegram()
        self.limits_class = SettingLimits()
        self.tg_connect = TGConnect()
        self.config_reader = ConfigReader()

    async def getting_an_invitation_link_from_the_database(self):
        """"
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
        """
        try:
            links_inviting: list = await self.db_handler.open_and_read_data("links_inviting")  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:  {links_inviting}")
            return links_inviting
        except Exception as error:
            logger.exception(f"–û—à–∏–±–∫–∞: {error}")

    @staticmethod
    async def log_and_display(message: str, lv, page):
        """
        –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GUI –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        :param message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥.
        :param lv: ListView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        logger.info(message)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
        lv.controls.append(ft.Text(message))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    async def inviting_without_limits(self, page: ft.Page, account_limits) -> None:
        """
        –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        :param account_limits: –¢–∞–±–ª–∏—Ü–∞ —Å –ª–∏–º–∏—Ç–∞–º–∏
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        start = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ ‚è±Ô∏è
        lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å ListView üîÑ

        async def add_items(_):
            """
            üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
            """

            # –ò–Ω–¥–∏–∫–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
            await self.log_and_display(f"‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞.\nüïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {str(start)}", lv, page)
            page.update()  # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üîÑ

            try:
                # logger.info(f"–ó–∞–ø—É—Å–∫ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤")
                for session_name in find_filess(directory_path=path_inviting_folder, extension='session'):
                    client = await self.tg_connect.get_telegram_client(session_name,
                                                                       account_directory=path_inviting_folder)
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
                    for link in await self.getting_an_invitation_link_from_the_database():
                        logger.info(f"{link[0]}")
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
                        await self.sub_unsub_tg.subscribe_to_group_or_channel(client, link[0])
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ usernames
                        number_usernames = await self.limits_class.get_usernames_with_limits(table_name="members",
                                                                                             account_limits=account_limits)

                        if len(number_usernames) == 0:
                            await self.log_and_display(f"–í —Ç–∞–±–ª–∏—Ü–µ members –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞", lv, page)
                            await self.sub_unsub_tg.unsubscribe_from_the_group(client, link[0])
                            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç

                        for username in number_usernames:
                            await self.log_and_display(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å username:{username[0]}", lv, page)
                            # –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø–ø—É –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É
                            time_inviting = self.config_reader.get_time_inviting()
                            try:
                                await self.log_and_display(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username[0]} –≤ –≥—Ä—É–ø–ø—É {link[0]}.", lv,
                                                           page)
                                await client(InviteToChannelRequest(link[0], [username[0]]))
                                await self.log_and_display(f"–£–¥–∞—á–Ω–æ! –°–ø–∏–º 5 —Å–µ–∫—É–Ω–¥", lv, page)
                                await asyncio.sleep(5)
                            # –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                            except UserChannelsTooMuchError:
                                await self.log_and_display(
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —É user –∫–∞–Ω–∞–ª–æ–≤ / —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø.",
                                    lv, page)
                                await record_inviting_results(time_inviting[0], time_inviting[1], username)
                            except UserNotMutualContactError:
                                await self.log_and_display(
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. User –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∑–∞–∏–º–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
                                    lv, page)
                                await record_inviting_results(time_inviting[0], time_inviting[1], username)
                            except UserKickedError:
                                await self.log_and_display(
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω —Ä–∞–Ω–µ–µ –∏–∑ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.",
                                    lv, page)
                                await record_inviting_results(time_inviting[0], time_inviting[1], username)
                            except (UserIdInvalidError, UsernameNotOccupiedError, ValueError, UsernameInvalidError):
                                logger.error(
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è {username}")
                                await record_inviting_results(time_inviting[0], time_inviting[1], username)
                            except ChatAdminRequiredError:
                                logger.error(
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                                await record_inviting_results(time_inviting[0], time_inviting[1], username)
                            except UserPrivacyRestrictedError:
                                logger.error(
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ {username} –Ω–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∞–º inviting")
                                await record_inviting_results(time_inviting[0], time_inviting[1], username)
                            except BotGroupsBlockedError:
                                logger.error(
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.")
                                await record_inviting_results(time_inviting[0], time_inviting[1], username)
                            except (TypeError, UnboundLocalError):
                                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}")
                            # –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
                            except ChatWriteForbiddenError:
                                logger.error(
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —á–∞—Ç–µ –Ω–µ –¥–∞—é—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ª—é–¥–µ–π –≤ —á–∞—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –±–æ—Ç –∞–¥–º–∏–Ω –∏ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã")
                                await record_inviting_results(time_inviting[0], time_inviting[1], username)
                                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                            except InviteRequestSentError:
                                logger.error(
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω–µ—Ç –≤–æ–∑–º–æ–∂–µ–Ω –ø–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ {link[0]}")
                                await record_inviting_results(time_inviting[0], time_inviting[1], username)
                                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                            # except (UserIdInvalidError, UsernameNotOccupiedError, ValueError, UsernameInvalidError):
                            #     logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è {username}")
                            #     await record_inviting_results(time_inviting[0], time_inviting[1], username)
                            #     break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                            except (
                                    ChannelPrivateError, TypeNotFoundError, AuthKeyDuplicatedError,
                                    UserBannedInChannelError):
                                await record_and_interrupt(time_inviting[0], time_inviting[1])
                                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                            except FloodWaitError as error:
                                logger.error(f'{error}')
                                await record_and_interrupt(time_inviting[0], time_inviting[1])
                                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                            except PeerFloodError:
                                logger.error(
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {username} –≤ –≥—Ä—É–ø–ø—É {link[0]}. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ {username} –Ω–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∞–º inviting")
                                await record_and_interrupt(time_inviting[0], time_inviting[1])
                                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç

                            except KeyboardInterrupt:  # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                                client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
                                await self.log_and_display(f"[!] –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", lv, page)
                            except Exception as error:
                                logger.exception(f"–û—à–∏–±–∫–∞: {error}")
                            else:
                                logger.info(f"[+] –£—á–∞—Å—Ç–Ω–∏–∫ {username} –¥–æ–±–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ {link[0]}")
                                await record_inviting_results(time_inviting[0], time_inviting[1], username)

                        await self.sub_unsub_tg.unsubscribe_from_the_group(client, link[0])
                logger.info("[!] –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –æ–∫–æ–Ω—á–µ–Ω!")
            except Exception as error:
                logger.exception(f"–û—à–∏–±–∫–∞: {error}")

            finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚è∞
            # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            await self.log_and_display(
                f"üîö –ö–æ–Ω–µ—Ü –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞.\nüïí –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {finish}.\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {finish - start}", lv, page)

        async def back_button_clicked(_):
            """
            ‚¨ÖÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞—è –≤ –º–µ–Ω—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞.
            """
            page.go("/inviting")  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ üè†

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page.views.append(
            ft.View(
                "/parsing",
                [
                    lv,  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                    ft.Column(),  # —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    ft.ElevatedButton(width=line_width_button, height=height_button, text=start_inviting_button,
                                      on_click=add_items),  # –ö–Ω–æ–ø–∫–∞ "üöÄ –ù–∞—á–∞—Ç—å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥"
                    ft.ElevatedButton(width=line_width_button, height=height_button, text=back_button,
                                      on_click=back_button_clicked)  # –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                ],
            )
        )

        page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üîÑ
