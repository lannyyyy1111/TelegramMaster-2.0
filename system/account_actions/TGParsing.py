# -*- coding: utf-8 -*-
import time
import datetime
import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger
from telethon import functions
from telethon import types
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import (ChannelParticipantsSearch, InputPeerEmpty, UserStatusEmpty, UserStatusLastMonth,
                               UserStatusLastWeek, UserStatusOffline, UserStatusOnline, UserStatusRecently)

from system.account_actions.TGConnect import TGConnect
from system.account_actions.TGSubUnsub import SubscribeUnsubscribeTelegram
from system.auxiliary_functions.auxiliary_functions import find_filess
from system.auxiliary_functions.config import (path_parsing_folder, line_width_button, height_button,
                                               time_activity_user_2)
from system.sqlite_working_tools.sqlite_working_tools import DatabaseHandler
import asyncio


class ParsingGroupMembers:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø"""

    def __init__(self):
        self.db_handler = DatabaseHandler()
        self.tg_connect = TGConnect()
        self.sub_unsub_tg = SubscribeUnsubscribeTelegram()

    async def parse_groups(self, page: ft.Page) -> None:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø"""
        start = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞

        lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(lv)
        page.update()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ListView –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ü–∏–∫–ª–∞

        async def add_items(e):
            # –ò–Ω–¥–∏–∫–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            lv.controls.append(ft.Text("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è..."))
            lv.controls.append(ft.Text('–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: ' + str(start)))
            lv.controls.append(ft.Text('‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞'))
            logger.info('–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: ' + str(start))
            logger.info("‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            page.update()  # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

            try:
                for session_name in find_filess(directory_path=path_parsing_folder, extension='session'):
                    client = await self.tg_connect.get_telegram_client(session_name,
                                                                       account_directory=path_parsing_folder)
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ parsing. –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –≤—ã–≤–æ–¥–∏–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                    for groups in await self.db_handler.open_and_read_data("writing_group_links"):
                        logger.info(f'[+] –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {groups[0]}')
                        lv.controls.append(ft.Text(f'[+] –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {groups[0]}'))
                        page.update()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
                        await self.sub_unsub_tg.subscribe_to_group_or_channel(client, groups[0])
                        await self.parse_group(client, groups[0], lv, page)  # Parsing –≥—Ä—É–ø–ø
                        await self.db_handler.delete_row_db(table="writing_group_links", column="writing_group_links",
                                                            value=groups)

                    # –ß–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ parsing —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç username
                    await self.db_handler.clean_no_username()
                    # –ß–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö username –ø–æ —Å—Ç–æ–ª–±—Ü—É id
                    await self.db_handler.delete_duplicates(table_name="members", column_name="id")
                    await client.disconnect()
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞: {e}")

            finish = datetime.datetime.now()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
            lv.controls.append(ft.Text('üîö –ö–æ–Ω–µ—Ü –ø–∞—Ä—Å–∏–Ω–≥–∞'))
            lv.controls.append(ft.Text('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ' + str(finish)))
            lv.controls.append(ft.Text('–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ' + str(finish - start)))  # –≤—ã—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            logger.info('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ' + str(finish))
            logger.info('–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ' + str(finish - start))  # –≤—ã—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            page.update()  # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

        async def back_button_clicked(e):
            """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
            page.go("/parsing")

        button = ft.ElevatedButton(width=line_width_button, height=height_button, text="–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", on_click=add_items)
        button_back = ft.ElevatedButton(width=line_width_button, height=height_button, text="–ù–∞–∑–∞–¥",
                                        on_click=back_button_clicked)

        page.views.append(
            ft.View(
                "/parsing",
                [
                    lv,
                    ft.Column(),  # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                    button, button_back
                ],
            )
        )

        page.update()

    async def parse_group(self, client, groups_wr, lv, page) -> None:
        """
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ê—Ä–≥—É–º–µ–Ω—Ç phone –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
        @handle_exceptions –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø–∏—Å–∏ –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö user_settings/software_database.db.
        :param client: –ö–ª–∏–µ–Ω—Ç Telegram
        :param groups_wr: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
        :param lv: ListView
        :param page: —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        """
        try:
            logger.info(f"[+] –°–ø–∞—Ä—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø—ã {groups_wr}")
            lv.controls.append(ft.Text(f"[+] –°–ø–∞—Ä—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–ø–ø—ã {groups_wr}"))
            page.update()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã—Ö

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º parsing –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª user_settings/software_database.db
            entities: list = await self.get_all_participants(await self.parse_users(client, groups_wr, lv, page), lv, page)

            await self.db_handler.write_parsed_chat_participants_to_db(entities)
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")

    async def parse_active_users(self, chat_input, limit_active_user) -> None:
        """
        Parsing —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—à—É—Ç –≤ —á–∞—Ç (–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
        :param chat_input: —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        :param limit_active_user: –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        try:
            for session_name in find_filess(directory_path=path_parsing_folder, extension='session'):
                client = await self.tg_connect.get_telegram_client(session_name,
                                                                   account_directory=path_parsing_folder)

                await self.sub_unsub_tg.subscribe_to_group_or_channel(client, chat_input)
                time.sleep(time_activity_user_2)
                await self.get_active_users(client, chat_input, limit_active_user)
                await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
            await self.db_handler.clean_no_username()  # –ß–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ parsing —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç username
            await self.db_handler.delete_duplicates(table_name="members",
                                                    column_name="id")  # –ß–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö username –ø–æ —Å—Ç–æ–ª–±—Ü—É id
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")

    async def parse_subscribed_groups(self) -> None:
        """Parsing –≥—Ä—É–ø–ø / –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª software_database.db"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ user_settings/software_database.db
            for session_name in find_filess(directory_path=path_parsing_folder, extension='session'):
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∏ –≤—ã–≤–æ–¥ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å / —Ç–µ—Ä–º–∏–Ω–∞–ª
                client = await self.tg_connect.get_telegram_client(session_name,
                                                                   account_directory=path_parsing_folder)
                logger.info("Parsing –≥—Ä—É–ø–ø / –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–∫–∫–∞—É–Ω—Ç")
                await self.forming_a_list_of_groups(client)
                await client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ telegram
            await self.db_handler.delete_duplicates(table_name="groups_and_channels",
                                                    column_name="id")  # –ß–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")

    async def get_active_users(self, client, chat, limit_active_user) -> None:
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param client: –∫–ª–∏–µ–Ω—Ç Telegram
        :param chat: —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
        :param limit_active_user: –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        try:
            async for message in client.iter_messages(chat, limit=int(limit_active_user)):
                if message.from_id is not None and hasattr(message.from_id, 'user_id'):
                    from_user = await client.get_entity(message.from_id.user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ –ò–î
                    entities = await self.get_active_user_data(from_user)
                    logger.info(entities)
                    await self.db_handler.write_parsed_chat_participants_to_db_active(entities)
                else:
                    logger.warning(f"Message {message.id} does not have a valid from_id.")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")

    async def filtering_groups(self, chats):
        """
        –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã
        :param chats: —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        """
        groups = []

        for chat in chats:
            try:
                if chat.megagroup:
                    groups.append(chat)
            except AttributeError:
                continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ 'megagroup'

        return groups

    async def name_of_the_groups(self, groups):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø"""
        group_names = []  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø

        for group in groups:
            logger.info(f"{group}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã
            logger.info(f"{group.title}")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            group_names.append(group.title)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–æ–∫

        return group_names

    async def choose_and_parse_group(self, page: ft.Page) -> None:
        """
        –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        :param page: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        """

        try:
            for session_name in find_filess(directory_path=path_parsing_folder, extension='session'):
                client = await self.tg_connect.get_telegram_client(session_name, account_directory=path_parsing_folder)
                chats = []
                last_date = None

                result = await client(
                    GetDialogsRequest(offset_date=last_date, offset_id=0, offset_peer=InputPeerEmpty(), limit=200,
                                      hash=0))
                chats.extend(result.chats)

                groups = await self.filtering_groups(chats)  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                group_titles = await self.name_of_the_groups(groups)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
                logger.info(group_titles)

                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_text = ft.Text(value="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")

                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
                async def handle_button_click(event) -> None:
                    selected_channel = dropdown.value  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    result_text.value = f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {selected_channel}"  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    page.update()

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
                    await self.parse_group(client, selected_channel)

                    # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await self.db_handler.clean_no_username()
                    await self.db_handler.delete_duplicates(table_name="members", column_name="id")
                    await client.disconnect()

                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
                    page.go("/parsing")

                async def back_button_clicked(e):
                    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
                    page.go("/parsing")

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
                select_button = ft.ElevatedButton(text="–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", on_click=handle_button_click)
                # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                button_back = ft.ElevatedButton(width=line_width_button, height=height_button, text="–ù–∞–∑–∞–¥",
                                                on_click=back_button_clicked)

                # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
                dropdown = ft.Dropdown(width=line_width_button,
                                       options=[ft.dropdown.Option(title) for title in group_titles],
                                       autofocus=True)

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫—É
                content = ft.Column(controls=[dropdown, select_button, button_back, result_text])

                page.views.append(content)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page.update()

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")

    async def parse_users(self, client, target_group, lv, page) -> list:
        """
        –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ user –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª members.db (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ members.db)
        :param client: –∫–ª–∏–µ–Ω—Ç Telegram
        :param target_group: –≥—Ä—É–ø–ø–∞ / –∫–∞–Ω–∞–ª
        :param lv: ListView
        :param page: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        :return: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            logger.info("[+] –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª software_database.db...")
            lv.controls.append(ft.Text("[+] –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤... –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª software_database.db..."))
            page.update()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            all_participants: list = []
            while_condition = True
            my_filter = ChannelParticipantsSearch("")
            offset = 0
            while while_condition:
                try:
                    participants = await client(
                        GetParticipantsRequest(channel=target_group, offset=offset, filter=my_filter,
                                               limit=200, hash=0))
                    all_participants.extend(participants.users)
                    offset += len(participants.users)
                    if len(participants.users) < 1:
                        while_condition = False
                except TypeError:
                    logger.info(f'–û—à–∏–±–∫–∞ parsing: –Ω–µ –≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ c—Å—ã–ª–∫–∞ {target_group} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π / –∫–∞–Ω–∞–ª–æ–º: {target_group}')
                    time.sleep(2)
                    break
            return all_participants
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")

    async def get_all_participants(self, all_participants, lv, page) -> list:
        """
        –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ user_settings/software_database.db
        :param all_participants: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        :return: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            entities: list = []  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
            for user in all_participants:
                await self.get_user_data(user, entities, lv, page)
            return entities  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")

    async def get_user_data(self, user, entities, lv, page) -> None:
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :param entities: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            username = user.username if user.username else "NONE"
            user_phone = user.phone if user.phone else "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∫—Ä—ã—Ç"
            first_name = user.first_name if user.first_name else ""
            last_name = user.last_name if user.last_name else ""
            photos_id = ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ñ–æ—Ç–æ" if isinstance(user.photo, types.UserProfilePhoto) else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Ñ–æ—Ç–æ")
            online_at = "–ë—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ"
            # –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://core.telegram.org/type/UserStatus
            if isinstance(user.status, (
                    UserStatusRecently, UserStatusOffline, UserStatusLastWeek, UserStatusLastMonth, UserStatusOnline,
                    UserStatusEmpty)):
                if isinstance(user.status, UserStatusOffline):
                    online_at = user.status.was_online
                if isinstance(user.status, UserStatusRecently):
                    online_at = "–ë—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ"
                if isinstance(user.status, UserStatusLastWeek):
                    online_at = "–ë—ã–ª(–∞) –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
                if isinstance(user.status, UserStatusLastMonth):
                    online_at = "–ë—ã–ª(–∞) –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
                if isinstance(user.status, UserStatusOnline):
                    online_at = user.status.expires
                if isinstance(user.status, UserStatusEmpty):
                    online_at = "—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            user_premium = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å premium" if user.premium else ""

            entities.append(
                [username, user.id, user.access_hash, first_name, last_name, user_phone, online_at, photos_id,
                 user_premium])
            lv.controls.append(ft.Text(f"{username}, {user.id}, {user.access_hash}, {first_name}, {last_name}, {user_phone}, {online_at}, {photos_id}, {user_premium}"))
            page.update()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")

    async def get_active_user_data(self, user):
        """
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        try:
            username = user.username if user.username else "NONE"
            user_phone = user.phone if user.phone else "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∫—Ä—ã—Ç"
            first_name = user.first_name if user.first_name else ""
            last_name = user.last_name if user.last_name else ""
            photos_id = ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ñ–æ—Ç–æ" if isinstance(user.photo, types.UserProfilePhoto) else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Ñ–æ—Ç–æ")
            online_at = "–ë—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ"
            # –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://core.telegram.org/type/UserStatus
            if isinstance(user.status, (
                    UserStatusRecently, UserStatusOffline, UserStatusLastWeek, UserStatusLastMonth, UserStatusOnline,
                    UserStatusEmpty)):
                if isinstance(user.status, UserStatusOffline):
                    online_at = user.status.was_online
                if isinstance(user.status, UserStatusRecently):
                    online_at = "–ë—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ"
                if isinstance(user.status, UserStatusLastWeek):
                    online_at = "–ë—ã–ª(–∞) –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
                if isinstance(user.status, UserStatusLastMonth):
                    online_at = "–ë—ã–ª(–∞) –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
                if isinstance(user.status, UserStatusOnline):
                    online_at = user.status.expires
                if isinstance(user.status, UserStatusEmpty):
                    online_at = "—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            user_premium = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å premium" if user.premium else ""

            entity = (username, user.id, user.access_hash,
                      first_name, last_name, user_phone,
                      online_at, photos_id, user_premium)

            return entity
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")

    async def forming_a_list_of_groups(self, client) -> None:
        """
        –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        :param client: –∫–ª–∏–µ–Ω—Ç
        """
        try:
            async for dialog in client.iter_dialogs():
                try:
                    dialog_id = dialog.id
                    ch = await client.get_entity(dialog_id)
                    result = await client(functions.channels.GetFullChannelRequest(channel=ch))
                    chs = await client.get_entity(result.full_chat)
                    chat_about = result.full_chat.about
                    chs_title = chs.title
                    username = chs.username
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ
                    if hasattr(result.full_chat, "participants_count"):
                        members_count = result.full_chat.participants_count
                    else:
                        members_count = 0
                    # –ó–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    parsing_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
                    log_message = f"{dialog_id}, {chs_title}, {chat_about}, https://t.me/{username}, {members_count}, {parsing_time}"
                    logger.info(log_message)
                    entities = [dialog_id, chs_title, chat_about, f"https://t.me/{username}", members_count,
                                parsing_time]
                    await self.db_handler.write_data_to_db(
                        creating_a_table="CREATE TABLE IF NOT EXISTS groups_and_channels(id, title, about, link, members_count, parsing_time)",
                        writing_data_to_a_table="INSERT INTO groups_and_channels (id, title, about, link, members_count, parsing_time) VALUES (?, ?, ?, ?, ?, ?)",
                        entities=entities)
                except TypeError:
                    continue  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ software_database.db –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")

    async def entering_data_for_parsing_active(self, page: ft.Page) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        try:
            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
            chat_input = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö:",
                                      multiline=False,
                                      max_lines=1)

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            limit_active_user = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å:",
                                             multiline=False,
                                             max_lines=1)

            # –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
            async def btn_click(e) -> None:
                # –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
                chat_input_value = chat_input.value
                limit_active_user_value = limit_active_user.value

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                logger.info(f"–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_input_value}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {limit_active_user_value}")

                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
                await self.parse_active_users(chat_input_value, int(limit_active_user_value))

                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
                page.go("/parsing")
                page.update()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            button = ft.ElevatedButton("–ì–æ—Ç–æ–≤–æ", on_click=btn_click)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page.views.append(
                ft.View(
                    "/parsing",  # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                    [
                        chat_input,  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
                        limit_active_user,  # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                        ft.Column(),  # –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                        button  # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
                    ]
                )
            )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞: {e}")
