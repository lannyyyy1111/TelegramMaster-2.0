# -*- coding: utf-8 -*-
import time
import webbrowser
from multiprocessing import Process

import uvicorn
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from loguru import logger
from fastapi.staticfiles import StaticFiles
# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π
from system.auxiliary_functions.config import program_name, program_version, date_of_program_change
from system.localization.localization import (parse_selected_user_subscribed_group, parse_single_or_multiple_groups,
                                              parse_active_group_members, clear_previously_parsed_data_list,
                                              parse_account_subscribed_groups_channels, inviting,
                                              invitation_1_time_per_hour, invitation_at_a_certain_time,
                                              inviting_every_day, importing_a_list_of_parsed_data, setting_reactions,
                                              we_are_winding_up_post_views, automatic_setting_of_reactions,
                                              sending_messages_via_chats,
                                              sending_messages_via_chats_with_answering_machine,
                                              sending_files_via_chats, sending_messages_files_via_chats,
                                              sending_personal_messages_with_limits,
                                              sending_files_to_personal_account_with_limits, choice_of_reactions,
                                              proxy_entry, changing_accounts, recording_api_id_api_hash,
                                              time_between_subscriptions, message_recording, link_entry, account_limits,
                                              message_limits, time_between_subscriptionss, creating_username_list,
                                              recording_the_time_between_messages,
                                              time_between_invites_sending_messages, recording_reaction_link,
                                              forming_list_of_chats_channels)

app = FastAPI()

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
app.mount("/static", StaticFiles(directory="docs/static"), name="static")
templates = Jinja2Templates(directory="docs/templates")  # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —à–∞–±–ª–æ–Ω–∞–º–∏.


@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    try:
        return templates.TemplateResponse("index.html", {"request": request, "program_name": program_name})
    except Exception as e:
        logger.exception(f"Error rendering the template: {e}")
        return {"error": "Failed to render template"}


@app.get("/menu", response_class=HTMLResponse)
async def menu(request: Request):
    """–ú–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–æ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    return templates.TemplateResponse("menu.html", {"request": request, "program_version": program_version,
                                                    "update_date": date_of_program_change})


@app.get("/inviting", response_class=HTMLResponse)
async def inviting_page(request: Request):
    """üöÄ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞")
    return templates.TemplateResponse("inviting.html", {"request": request, "program_name": program_name,
                                                        "inviting": inviting,
                                                        "invitation_1_time_per_hour": invitation_1_time_per_hour,
                                                        "invitation_at_a_certain_time": invitation_at_a_certain_time,
                                                        "inviting_every_day": inviting_every_day})


@app.get('/sending_messages', response_class=HTMLResponse)
async def sending_messages(request: Request):
    """üí¨ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    return templates.TemplateResponse('sending_messages.html', {"request": request, "program_name": program_name,
                                                                "sending_messages_via_chats": sending_messages_via_chats,
                                                                "sending_messages_via_chats_with_answering_machine": sending_messages_via_chats_with_answering_machine,
                                                                "sending_files_via_chats": sending_files_via_chats,
                                                                "sending_messages_files_via_chats": sending_messages_files_via_chats,
                                                                "sending_personal_messages_with_limits": sending_personal_messages_with_limits,
                                                                "sending_files_to_personal_account_with_limits": sending_files_to_personal_account_with_limits})


@app.get('/editing_bio', response_class=HTMLResponse)
async def editing_bio(request: Request):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–ò–õ"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ò–û")
    return templates.TemplateResponse('editing_bio.html', {"request": request, "program_name": program_name})


@app.get('/working_with_contacts', response_class=HTMLResponse)
async def working_with_contacts(request: Request):
    """–†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏")
    return templates.TemplateResponse('working_with_contacts.html', {"request": request, "program_name": program_name})


@app.get('/settings', response_class=HTMLResponse)
async def settings(request: Request):
    """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    return templates.TemplateResponse('settings.html', {"request": request, "program_name": program_name,
                                                        "choice_of_reactions": choice_of_reactions,
                                                        "proxy_entry": proxy_entry,
                                                        "changing_accounts": changing_accounts,
                                                        "recording_api_id_api_hash": recording_api_id_api_hash,
                                                        "time_between_subscriptions": time_between_subscriptions,
                                                        "message_recording": message_recording,
                                                        "link_entry": link_entry,
                                                        "account_limits": account_limits,
                                                        "message_limits": message_limits,
                                                        "time_between_subscriptionss": time_between_subscriptionss,
                                                        "creating_username_list": creating_username_list,
                                                        "recording_the_time_between_messages": recording_the_time_between_messages,
                                                        "time_between_invites_sending_messages": time_between_invites_sending_messages,
                                                        "recording_reaction_link": recording_reaction_link,
                                                        "forming_list_of_chats_channels": forming_list_of_chats_channels,
                                                        })


@app.get('/working_with_reactions', response_class=HTMLResponse)
async def working_with_reactions(request: Request):
    """üëç –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏")
    return templates.TemplateResponse('working_with_reactions.html',
                                      {"request": request, "program_name": program_name,
                                       "setting_reactions": setting_reactions,
                                       "we_are_winding_up_post_views": we_are_winding_up_post_views,
                                       "automatic_setting_of_reactions": automatic_setting_of_reactions})


@app.get('/parsing', response_class=HTMLResponse)
async def parsing(request: Request):
    """üîç –ü–∞—Ä—Å–∏–Ω–≥"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    return templates.TemplateResponse('parsing.html', {"request": request, "program_name": program_name,
                                                       "parse_single_or_multiple_groups": parse_single_or_multiple_groups,
                                                       "parse_selected_user_subscribed_group": parse_selected_user_subscribed_group,
                                                       "parse_active_group_members": parse_active_group_members,
                                                       "parse_account_subscribed_groups_channels": parse_account_subscribed_groups_channels,
                                                       "clear_previously_parsed_data_list": clear_previously_parsed_data_list,
                                                       "importing_a_list_of_parsed_data": importing_a_list_of_parsed_data})


@app.get('/subscribe_unsubscribe', response_class=HTMLResponse)
async def subscribe_unsubscribe(request: Request):
    """–ü–æ–¥–ø–∏—Å–∫–∞, –æ—Ç–ø–∏—Å–∫–∞"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –æ—Ç–ø–∏—Å–∫–∏")
    return templates.TemplateResponse('subscribe_unsubscribe.html',
                                      {"request": request, "program_name": program_name})


@app.get('/connect_accounts', response_class=HTMLResponse)
async def connect_accounts(request: Request):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    return templates.TemplateResponse('connect_accounts.html',
                                      {"request": request, "program_name": program_name})


@app.get('/account_verification', response_class=HTMLResponse)
async def account_verification(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    return templates.TemplateResponse('account_verification.html',
                                      {"request": request, "program_name": program_name})


@app.get('/creating_groups', response_class=HTMLResponse)
async def creating_groups(request: Request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø (—á–∞—Ç–æ–≤)"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø (—á–∞—Ç–æ–≤)")
    return templates.TemplateResponse('creating_groups.html',
                                      {"request": request, "program_name": program_name})


@app.get('/launch_telegrammaster', response_class=HTMLResponse)
async def launch_telegrammaster(request: Request):
    """–ó–∞–ø—É—Å–∫ TelegramMaster"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ –∑–∞–ø—É—Å–∫–µ TelegramMaster 2.0")
    return templates.TemplateResponse('launch_telegrammaster.html',
                                      {"request": request, "program_name": program_name})


@app.get('/working_with_errors_telegrammaster', response_class=HTMLResponse)
async def working_with_errors_telegrammaster(request: Request):
    """–†–∞–±–æ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏ TelegramMaster 2.0"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ —Ä–∞–±–æ—Ç–µ —Å –æ—à–∏–±–∫–∞–º–∏ TelegramMaster 2.0")
    return templates.TemplateResponse('working_with_errors_telegrammaster.html',
                                      {"request": request, "program_name": program_name})


@app.get('/install_python_update_pip', response_class=HTMLResponse)
async def install_python_update_pip(request: Request):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PIP"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Python, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ PIP")
    return templates.TemplateResponse('install_python_update_pip.html',
                                      {"request": request, "program_name": program_name})


@app.get('/preliminary_setting_of_program_installation_of_program_by_default', response_class=HTMLResponse)
async def preliminary_setting_of_program_installation_of_program_by_default(request: Request):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    logger.info(
        "–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    return templates.TemplateResponse(
        'preliminary_setting_of_program_installation_of_program_by_default.html',
        {"request": request, "program_name": program_name})


@app.get('/registration_api_id_api_hash', response_class=HTMLResponse)
async def registration_api_id_api_hash(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ api –∏ hash"""
    logger.info('–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ api –∏ hash')
    return templates.TemplateResponse('registration_api_id_api_hash.html',
                                      {"request": request, "program_name": program_name})


@app.get('/telegram_limits', response_class=HTMLResponse)
async def telegram_limits(request: Request):
    """–õ–∏–º–∏—Ç—ã Telegram"""
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ –ª–∏–º–∏—Ç–∞—Ö Telegram")
    return templates.TemplateResponse('telegram_limits.html',
                                      {"request": request, "program_name": program_name})


def run_uvicorn():
    """–ó–∞–ø—É—Å–∫ Uvicorn –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ."""
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ FastAPI...")
    uvicorn.run("docs.app:app", host="127.0.0.1", port=8000, reload=True)


def start_app():
    try:
        server_process = Process(target=run_uvicorn)
        server_process.start()
        time.sleep(10)
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.

        webbrowser.open("http://127.0.0.1:8000")

        server_process.join()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    except Exception as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {error}")
